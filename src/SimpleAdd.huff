/* Interface */
#define function addTwo(uint256, uint256) view returns (uint256)

/* Methods */
#define macro MAIN() = takes(0) returns (0) {
    // get the function selector
    0x00
    calldataload
    0xE0 // [224] bc 256 bits - 32 bits = 28 bytes, 32 bits is 4 bytes which is our sig
    shr // this will shift the calldata by 28 bytes so we get 4 bytes on the stack which is our sig

    // jump to the implementation of the ADD_TWO function
    // if the calldata matches the function selector
    _FUNC_SIG(addTwo) eq addTwo jumpi

    addTwo:
        ADD_TWO()
}

#define macro ADD_TWO() = takes(0) returns(0) {
    0x04 calldataload // load first 32 bytes onto the stack - number 1
    0x24 calldataload // load second 32 bytes onto the stack - number 2
    add // add number 1 and 2 and put them onto stack

    0x00 mstore // place the result in memory
    0x20 0x00 return // return the result
}
